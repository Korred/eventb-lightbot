<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.core.machineFile org.eventb.core.configuration="org.eventb.core.fwd;de.prob.units.mchBase" org.eventb.texttools.text_lastmodified="1453590807781" org.eventb.texttools.text_representation="machine mac_2 refines mac_1  sees lvl_3_1&#10;&#10;variables&#10;&#9;lb_pos // current position of LightBot in level&#10;   &#9;lb_rot // direction that LightBot is currently facing&#10;    lights_stat // set that contains the current status of all lights (either on or off)&#10;&#9;proc_list // list that stores what commands and in what order are stored in which process&#10;&#9;cmd_amt //stores how many commands are already stored in a given process&#10;&#9;play_mode //indicator whether the play mode is activated or not&#10;&#9;prog_mode //indictator whether the programming mode is activated or nor&#10;&#9;proc_stack //program-stack, used to process commands in the specified order&#10;&#10;&#9;stack_top //indicator that shows the current top of the program-stack&#10;&#10;invariants&#10;&#9;@2_inv0 proc_list ∈ 1‥proc_number→(ℕ1⇸commands)&#10;&#10;&#9;@2_inv1 cmd_amt ∈1‥proc_number → ℕ&#10;&#9;@2_inv2 ∀d·d∈1‥proc_number ⇒ cmd_amt(d)≤proc_length(d)&#10;&#10;&#9;@2_inv3 play_mode ∈ {TRUE,FALSE}&#10;&#9;@2_inv4 prog_mode ∈ {TRUE,FALSE}&#10;&#9;@2_inv5 play_mode ≠ prog_mode&#10;&#10;&#9;@2_inv6 proc_stack ∈ ℕ1 ⇸ (stack_lables⇸ℕ1)&#10;&#9;@2_inv7 stack_top ∈ dom(proc_stack)&#10;&#10;&#10;events&#10;  event INITIALISATION extends INITIALISATION&#10;  then&#10;&#9;@2_init_proc proc_list ≔ (λp·p∈1‥ proc_number∣∅)&#10;&#9;@2_init_amt cmd_amt ≔(λa·a∈1‥proc_number∣0)&#10;&#9;@2_init_play play_mode ≔ FALSE&#10;&#9;@2_init_prog prog_mode ≔ TRUE&#10;&#10;&#9;@2_init_stack proc_stack ≔ {1↦ {prog↦1,cmd↦1}} //Stack is initialized so that it points to the Main-Program and the first command of Main&#10;&#9;@2_init_top stack_top ≔ 1&#10;  end&#10;&#10;&#10;  event switch_mode&#10;  then&#10;  &#9;@act1 play_mode ≔ bool(play_mode ≠ TRUE)&#10;  &#9;@act2 prog_mode ≔ bool(prog_mode ≠ TRUE)&#10;  end&#10;&#10;event add_command&#10;any command proc&#10;when&#10;  &#9;@grd1 proc ∈1‥proc_number&#10;  &#9;@grd2 cmd_amt(proc)&lt;proc_length(proc)&#10;  &#9;@grd3 command ∈level_commands&#10;  &#9;@grd4 prog_mode =TRUE&#10;  &#9;@grd5 (proc_list(proc) ∪ {cmd_amt(proc)+1↦command}) ∈ (ℕ1⇸commands) //needed for act2 in order to satisfy  2_inv0&#10;then&#10;  &#9;@act1 cmd_amt(proc)≔cmd_amt(proc)+1&#10;  &#9;@act2 proc_list(proc)≔  proc_list(proc) ∪ {cmd_amt(proc)+1↦command}&#10;end&#10;&#10;&#10;  event move extends move&#10;  when&#10;  &#9;@2_grd0 play_mode =TRUE&#10;  &#9;@2_grd1 {cmd,prog} = dom(proc_stack(stack_top))&#10;  &#9;@2_grd2 proc_stack(stack_top)(prog)∈dom(cmd_amt)&#10;  &#9;@2_grd3 proc_stack(stack_top)(cmd) ≤ cmd_amt(proc_stack(stack_top)(prog)) //check whether stack points to a existent command&#10;  &#9;@2_grd4 proc_stack(stack_top)(cmd)∈dom(proc_list(proc_stack(stack_top)(prog)))&#10;  &#9;@2_grd5 proc_list(proc_stack(stack_top)(prog))(proc_stack(stack_top)(cmd))= move_c //check whether the pointed to command is move_c&#10;  &#9;@2_grd6 stack_top∈dom(proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1}})&#10;  &#9;@2_grd7 proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1}}∈ℕ1 ⇸ (stack_lables ⇸ ℕ1)&#10;  &#9;then&#10;  &#9;@2_act0  proc_stack(stack_top) ≔ {prog↦proc_stack(stack_top)(prog), cmd↦proc_stack(stack_top)(cmd)+1}&#10;  end&#10;&#10;    event rotate_left extends rotate_left&#10;    when&#10;  &#9;@2_grd0 play_mode =TRUE&#10;  &#9;@2_grd1 {cmd,prog} = dom(proc_stack(stack_top))&#10;  &#9;@2_grd2 proc_stack(stack_top)(prog)∈dom(cmd_amt)&#10;  &#9;@2_grd3 proc_stack(stack_top)(cmd) ≤ cmd_amt(proc_stack(stack_top)(prog)) //check whether stack points to a existent command&#10;  &#9;@2_grd4 proc_stack(stack_top)(cmd)∈dom(proc_list(proc_stack(stack_top)(prog)))&#10;  &#9;@2_grd5 proc_list(proc_stack(stack_top)(prog))(proc_stack(stack_top)(cmd))= left_c //check whether the pointed to command is left_c&#10;  &#9;@2_grd6 stack_top∈dom(proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1}})&#10;  &#9;@2_grd7 proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1}}∈ℕ1 ⇸ (stack_lables ⇸ ℕ1)&#10;  &#9;then&#10;  &#9;@2_act0  proc_stack(stack_top) ≔ {prog↦proc_stack(stack_top)(prog), cmd↦proc_stack(stack_top)(cmd)+1}&#10;  end&#10;&#10;&#10;&#10;&#10;  event rotate_right extends rotate_right&#10;    when&#10;  &#9;@2_grd0 play_mode =TRUE&#10;  &#9;@2_grd1 {cmd,prog} = dom(proc_stack(stack_top))&#10;  &#9;@2_grd2 proc_stack(stack_top)(prog)∈dom(cmd_amt)&#10;  &#9;@2_grd3 proc_stack(stack_top)(cmd) ≤ cmd_amt(proc_stack(stack_top)(prog)) //check whether stack points to a existent command&#10;  &#9;@2_grd4 proc_stack(stack_top)(cmd)∈dom(proc_list(proc_stack(stack_top)(prog)))&#10;  &#9;@2_grd5 proc_list(proc_stack(stack_top)(prog))(proc_stack(stack_top)(cmd))= right_c //check whether the pointed to command is right_c&#10;  &#9;@2_grd6 stack_top∈dom(proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1}})&#10;  &#9;@2_grd7 proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1}}∈ℕ1 ⇸ (stack_lables ⇸ ℕ1)&#10;  &#9;then&#10;  &#9;@2_act0  proc_stack(stack_top) ≔ {prog↦proc_stack(stack_top)(prog), cmd↦proc_stack(stack_top)(cmd)+1}&#10;  end&#10;&#10;  event light extends light&#10;    when&#10;  &#9;@2_grd0 play_mode =TRUE&#10;  &#9;@2_grd1 {cmd,prog} = dom(proc_stack(stack_top))&#10;  &#9;@2_grd2 proc_stack(stack_top)(prog)∈dom(cmd_amt)&#10;  &#9;@2_grd3 proc_stack(stack_top)(cmd) ≤ cmd_amt(proc_stack(stack_top)(prog)) //check whether stack points to a existent command&#10;  &#9;@2_grd4 proc_stack(stack_top)(cmd)∈dom(proc_list(proc_stack(stack_top)(prog)))&#10;  &#9;@2_grd5 proc_list(proc_stack(stack_top)(prog))(proc_stack(stack_top)(cmd))= light_c  //check whether the pointed to command is light_c&#10;  &#9;@2_grd6 stack_top∈dom(proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1}})&#10;  &#9;@2_grd7 proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1}}∈ℕ1 ⇸ (stack_lables ⇸ ℕ1)&#10;  &#9;then&#10;  &#9;@2_act0  proc_stack(stack_top) ≔ {prog↦proc_stack(stack_top)(prog), cmd↦proc_stack(stack_top)(cmd)+1}&#10;  end&#10;&#10;  event jump extends jump&#10;  when&#10;  &#9;@2_grd0 play_mode =TRUE&#10;  &#9;@2_grd1 {cmd,prog} = dom(proc_stack(stack_top))&#10;  &#9;@2_grd2 proc_stack(stack_top)(prog)∈dom(cmd_amt)&#10;  &#9;@2_grd3 proc_stack(stack_top)(cmd) ≤ cmd_amt(proc_stack(stack_top)(prog)) //check whether stack points to a existent command&#10;  &#9;@2_grd4 proc_stack(stack_top)(cmd)∈dom(proc_list(proc_stack(stack_top)(prog)))&#10;  &#9;@2_grd5 proc_list(proc_stack(stack_top)(prog))(proc_stack(stack_top)(cmd))= jump_c  //check whether the pointed to command is jump_c&#10;  &#9;@2_grd6 stack_top∈dom(proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1}})&#10;  &#9;@2_grd7 proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1}}∈ℕ1 ⇸ (stack_lables ⇸ ℕ1)&#10;  &#9;then&#10;  &#9;@2_act0  proc_stack(stack_top) ≔ {prog↦proc_stack(stack_top)(prog), cmd↦proc_stack(stack_top)(cmd)+1}&#10;  &#9;end&#10;&#10;  &#9;event start_proc1&#10;  &#9;when&#10;    @2_grd0 play_mode =TRUE&#10;  &#9;@2_grd1 {cmd,prog} = dom(proc_stack(stack_top))&#10;  &#9;@2_grd2 proc_stack(stack_top)(prog)∈dom(cmd_amt)&#10;  &#9;@2_grd3 proc_stack(stack_top)(cmd) ≤ cmd_amt(proc_stack(stack_top)(prog)) //check whether stack points to a existent command&#10;  &#9;@2_grd4 proc_stack(stack_top)(cmd)∈dom(proc_list(proc_stack(stack_top)(prog)))&#10;  &#9;@2_grd5 proc_list(proc_stack(stack_top)(prog))(proc_stack(stack_top)(cmd))= proc1_c  //check whether the pointed to command is sub-process1&#10;  &#9;@2_grd6 proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1},stack_top+1 ↦ {prog ↦ 2,cmd ↦ 1}}∈ℕ1 ⇸ (stack_lables ⇸ ℕ1)&#10;  &#9;@2_grd7 stack_top+1∈dom(proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1},stack_top+1 ↦ {prog ↦ 2,cmd ↦ 1}})&#10;  &#9;then&#10;&#9;@2_act0 proc_stack ≔  proc_stack  { stack_top ↦ { prog ↦ proc_stack(stack_top)(prog), cmd ↦ proc_stack(stack_top)(cmd) +1}, stack_top + 1 ↦ { prog ↦ 2, cmd ↦ 1 } }&#10;&#9;@2_act1 stack_top ≔ stack_top+1&#10;  &#9;end&#10;&#10;&#10;&#10;  &#9;event start_proc2&#10;  &#9;when&#10;    @2_grd0 play_mode =TRUE&#10;  &#9;@2_grd1 {cmd,prog} = dom(proc_stack(stack_top))&#10;  &#9;@2_grd2 proc_stack(stack_top)(prog)∈dom(cmd_amt)&#10;  &#9;@2_grd3 proc_stack(stack_top)(cmd) ≤ cmd_amt(proc_stack(stack_top)(prog)) //checks whether stack points to an existent command / current command-num does not exceed cmd_amt variable&#10;  &#9;@2_grd4 proc_stack(stack_top)(cmd)∈dom(proc_list(proc_stack(stack_top)(prog)))&#10;  &#9;@2_grd5 proc_list(proc_stack(stack_top)(prog))(proc_stack(stack_top)(cmd))= proc2_c  //check whether the pointed to command is sub-process2&#10;  &#9;@2_grd6 proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1},stack_top+1 ↦ {prog ↦ 3,cmd ↦ 1}}∈ℕ1 ⇸ (stack_lables ⇸ ℕ1)&#10;  &#9;@2_grd7 stack_top+1∈dom(proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1},stack_top+1 ↦ {prog ↦ 3,cmd ↦ 1}})&#10;  &#9;then&#10;&#9;@2_act0 proc_stack ≔  proc_stack  { stack_top ↦ { prog ↦ proc_stack(stack_top)(prog), cmd ↦ proc_stack(stack_top)(cmd) +1}, stack_top + 1 ↦ { prog ↦ 3, cmd ↦ 1 } }&#10;&#9;@2_act1 stack_top ≔ stack_top+1&#10;  &#9;end&#10;&#10;&#10;&#9;event end_proc1&#10;  &#9;when&#10;  &#9;  @2_grd0 play_mode=TRUE&#10;  &#9;  @2_grd1 {cmd,prog} = dom(proc_stack(stack_top))&#10;      @2_grd2 proc_stack(stack_top)(prog) = 2&#10;      @2_grd3 proc_stack(stack_top)(prog)∈dom(cmd_amt)&#10;      @2_grd4 proc_stack(stack_top)(cmd) &gt; cmd_amt(proc_stack(stack_top)(prog)) //can only end process 1 when no more commands are  available / current command-num exceeds cmd_amt variable&#10;  &#9;  @2_grd5 proc_stack ∖ {stack_top ↦ proc_stack(stack_top)} ∈ℕ1 ⇸ (stack_lables ⇸ ℕ1)&#10;  &#9;  @2_grd6 (stack_top−1) &gt;0&#10;  &#9;  @2_grd7 stack_top − 1∈dom(proc_stack ∖ {stack_top ↦ proc_stack(stack_top)})&#10;  &#9;then&#10;  &#9;  @2_act0 proc_stack ≔ proc_stack ∖ {stack_top ↦ proc_stack(stack_top)}&#10;  &#9;  @2_act1 stack_top ≔ stack_top−1&#10;  &#9;end&#10;&#10;&#10;  &#9;event end_proc2&#10;  &#9;when&#10;  &#9;  @2_grd0 play_mode=TRUE&#10;  &#9;  @2_grd1 {cmd,prog} = dom(proc_stack(stack_top))&#10;      @2_grd2 proc_stack(stack_top)(prog) = 3&#10;      @2_grd3 proc_stack(stack_top)(prog)∈dom(cmd_amt)&#10;      @2_grd4 proc_stack(stack_top)(cmd) &gt; cmd_amt(proc_stack(stack_top)(prog)) //can only end process 2 when no more commands are  available / current command-num exceeds cmd_amt variable&#10;  &#9;  @2_grd5 proc_stack ∖ {stack_top ↦ proc_stack(stack_top)} ∈ℕ1 ⇸ (stack_lables ⇸ ℕ1)&#10;  &#9;  @2_grd6 (stack_top−1) &gt;0&#10;  &#9;  @2_grd7 stack_top − 1∈dom(proc_stack ∖ {stack_top ↦ proc_stack(stack_top)})&#10;  &#9;then&#10;  &#9;  @2_act0 proc_stack ≔ proc_stack ∖ {stack_top ↦ proc_stack(stack_top)}&#10;  &#9;  @2_act1 stack_top ≔ stack_top−1&#10;  &#9;end&#10;&#10;end&#10;" version="5">
<org.eventb.core.refinesMachine name="'" org.eventb.core.target="mac_1"/>
<org.eventb.core.seesContext name="_NxoKYLcjEeW-tbcSMvtC4g" org.eventb.core.target="lvl_3_1"/>
<org.eventb.core.variable name="_eA6XMbMXEeWeFKteydocvQ" org.eventb.core.comment="current position of LightBot in level" org.eventb.core.identifier="lb_pos"/>
<org.eventb.core.variable name="_eA6XMrMXEeWeFKteydocvQ" org.eventb.core.comment="direction that LightBot is currently facing" org.eventb.core.identifier="lb_rot"/>
<org.eventb.core.variable name="_eA6XM7MXEeWeFKteydocvQ" org.eventb.core.comment="set that contains the current status of all lights (either on or off)" org.eventb.core.identifier="lights_stat"/>
<org.eventb.core.event name="_eA6XMrMXEeWeFKteydocvR" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="INITIALISATION">
<org.eventb.core.action name="_-JJEULb7EeWxZ4N0nR4Cbw" org.eventb.core.assignment="proc_list ≔ (λp·p∈1‥ proc_number∣∅)" org.eventb.core.label="2_init_proc"/>
<org.eventb.core.action name="_-JJEUbb7EeWxZ4N0nR4Cbw" org.eventb.core.assignment="cmd_amt ≔(λa·a∈1‥proc_number∣0)" org.eventb.core.label="2_init_amt"/>
<org.eventb.core.action name="_-JJEUrb7EeWxZ4N0nR4Cbw" org.eventb.core.assignment="play_mode ≔ FALSE" org.eventb.core.label="2_init_play"/>
<org.eventb.core.action name="_-JJEU7b7EeWxZ4N0nR4Cbw" org.eventb.core.assignment="prog_mode ≔ TRUE" org.eventb.core.label="2_init_prog"/>
<org.eventb.core.action name="_0k0Y8Lb8EeWxZ4N0nR4Cbw" org.eventb.core.assignment="proc_stack ≔ {1↦ {prog↦1,cmd↦1}}" org.eventb.core.comment="Stack is initialized so that it points to the Main-Program and the first command of Main" org.eventb.core.label="2_init_stack"/>
<org.eventb.core.action name="_-JJEVLb7EeWxZ4N0nR4Cbw" org.eventb.core.assignment="stack_top ≔ 1" org.eventb.core.label="2_init_top"/>
</org.eventb.core.event>
<org.eventb.core.event name="_eA6XMrMXEeWeFKteydocvS" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="switch_mode">
<org.eventb.core.action name="_0k0Y8rb8EeWxZ4N0nR4Cbw" org.eventb.core.assignment="play_mode ≔ bool(play_mode ≠ TRUE)" org.eventb.core.label="act1"/>
<org.eventb.core.action name="_0k0Y8bb8EeWxZ4N0nR4Cbw" org.eventb.core.assignment="prog_mode ≔ bool(prog_mode ≠ TRUE)" org.eventb.core.label="act2"/>
</org.eventb.core.event>
<org.eventb.core.event name="_eA6XMrMXEeWeFKteydocvT" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="add_command">
<org.eventb.core.parameter name="_-JJEVbb7EeWxZ4N0nR4Cbw" org.eventb.core.identifier="command"/>
<org.eventb.core.parameter name="_-JJEVrb7EeWxZ4N0nR4Cbw" org.eventb.core.identifier="proc"/>
<org.eventb.core.guard name="_-JJEV7b7EeWxZ4N0nR4Cbw" org.eventb.core.label="grd1" org.eventb.core.predicate="proc ∈1‥proc_number"/>
<org.eventb.core.guard name="_-JJEWLb7EeWxZ4N0nR4Cbw" org.eventb.core.label="grd2" org.eventb.core.predicate="cmd_amt(proc)&lt;proc_length(proc)"/>
<org.eventb.core.guard name="_-JJEWbb7EeWxZ4N0nR4Cbw" org.eventb.core.label="grd3" org.eventb.core.predicate="command ∈level_commands"/>
<org.eventb.core.guard name="_-JJEWrb7EeWxZ4N0nR4Cbw" org.eventb.core.label="grd4" org.eventb.core.predicate="prog_mode =TRUE"/>
<org.eventb.core.guard name="_-JJEW7b7EeWxZ4N0nR4Cbw" org.eventb.core.comment="needed for act2 in order to satisfy  2_inv0" org.eventb.core.label="grd5" org.eventb.core.predicate="(proc_list(proc) ∪ {cmd_amt(proc)+1↦command}) ∈ (ℕ1⇸commands)"/>
<org.eventb.core.action name="_uXcoALcNEeWFJeLpwlsfuA" org.eventb.core.assignment="cmd_amt(proc)≔cmd_amt(proc)+1" org.eventb.core.label="act1"/>
<org.eventb.core.action name="_3Ch34LcEEeWqgZYF5piVcw" org.eventb.core.assignment="proc_list(proc)≔  proc_list(proc) ∪ {cmd_amt(proc)+1↦command}" org.eventb.core.label="act2"/>
</org.eventb.core.event>
<org.eventb.core.event name="_eA6XMrMXEeWeFKteydocvU" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="move">
<org.eventb.core.refinesEvent name="_-JJEXrb7EeWxZ4N0nR4Cbw" org.eventb.core.target="move"/>
<org.eventb.core.guard name="_bPJMULcLEeWqgZYF5piVcw" org.eventb.core.label="2_grd0" org.eventb.core.predicate="play_mode =TRUE"/>
<org.eventb.core.guard name="_bPJMUbcLEeWqgZYF5piVcw" org.eventb.core.label="2_grd1" org.eventb.core.predicate="{cmd,prog} = dom(proc_stack(stack_top))"/>
<org.eventb.core.guard name="_fILPMLcSEeWFJeLpwlsfuA" org.eventb.core.label="2_grd2" org.eventb.core.predicate="proc_stack(stack_top)(prog)∈dom(cmd_amt)"/>
<org.eventb.core.guard name="_lriOgLcSEeWFJeLpwlsfuA" org.eventb.core.comment="check whether stack points to a existent command" org.eventb.core.label="2_grd3" org.eventb.core.predicate="proc_stack(stack_top)(cmd) ≤ cmd_amt(proc_stack(stack_top)(prog))"/>
<org.eventb.core.guard name="_fyStwLcTEeWFJeLpwlsfuA" org.eventb.core.label="2_grd4" org.eventb.core.predicate="proc_stack(stack_top)(cmd)∈dom(proc_list(proc_stack(stack_top)(prog)))"/>
<org.eventb.core.guard name="_o3hM4LcTEeWFJeLpwlsfuA" org.eventb.core.comment="check whether the pointed to command is move_c" org.eventb.core.label="2_grd5" org.eventb.core.predicate="proc_list(proc_stack(stack_top)(prog))(proc_stack(stack_top)(cmd))= move_c"/>
<org.eventb.core.action name="_eOkw4LcWEeWMSJ_-4IFJXw" org.eventb.core.assignment="proc_stack(stack_top) ≔ {prog↦proc_stack(stack_top)(prog), cmd↦proc_stack(stack_top)(cmd)+1}" org.eventb.core.label="2_act0"/>
<org.eventb.core.guard name="_DOybkLcUEeWFJeLpwlsfuA" org.eventb.core.label="2_grd6" org.eventb.core.predicate="stack_top∈dom(proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1}})"/>
<org.eventb.core.guard name="_DOybkbcUEeWFJeLpwlsfuA" org.eventb.core.label="2_grd7" org.eventb.core.predicate="proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1}}∈ℕ1 ⇸ (stack_lables ⇸ ℕ1)"/>
</org.eventb.core.event>
<org.eventb.core.event name="_eA6XMrMXEeWeFKteydocvV" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="rotate_left">
<org.eventb.core.refinesEvent name="_-JJEX7b7EeWxZ4N0nR4Cbw" org.eventb.core.target="rotate_left"/>
<org.eventb.core.guard name="_Gh-jQLcXEeW4lb6BfAsDRQ" org.eventb.core.label="2_grd0" org.eventb.core.predicate="play_mode =TRUE"/>
<org.eventb.core.guard name="_Gh-jQbcXEeW4lb6BfAsDRQ" org.eventb.core.label="2_grd1" org.eventb.core.predicate="{cmd,prog} = dom(proc_stack(stack_top))"/>
<org.eventb.core.guard name="_DOybkrcUEeWFJeLpwlsfuA" org.eventb.core.label="2_grd2" org.eventb.core.predicate="proc_stack(stack_top)(prog)∈dom(cmd_amt)"/>
<org.eventb.core.guard name="_DOybk7cUEeWFJeLpwlsfuA" org.eventb.core.comment="check whether stack points to a existent command" org.eventb.core.label="2_grd3" org.eventb.core.predicate="proc_stack(stack_top)(cmd) ≤ cmd_amt(proc_stack(stack_top)(prog))"/>
<org.eventb.core.guard name="_DOyblLcUEeWFJeLpwlsfuA" org.eventb.core.label="2_grd4" org.eventb.core.predicate="proc_stack(stack_top)(cmd)∈dom(proc_list(proc_stack(stack_top)(prog)))"/>
<org.eventb.core.guard name="_DOyblbcUEeWFJeLpwlsfuA" org.eventb.core.comment="check whether the pointed to command is left_c" org.eventb.core.label="2_grd5" org.eventb.core.predicate="proc_list(proc_stack(stack_top)(prog))(proc_stack(stack_top)(cmd))= left_c"/>
<org.eventb.core.guard name="_wvRr8LcWEeW4lb6BfAsDRQ" org.eventb.core.label="2_grd6" org.eventb.core.predicate="stack_top∈dom(proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1}})"/>
<org.eventb.core.guard name="_2CB_ALcWEeW4lb6BfAsDRQ" org.eventb.core.label="2_grd7" org.eventb.core.predicate="proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1}}∈ℕ1 ⇸ (stack_lables ⇸ ℕ1)"/>
<org.eventb.core.action name="_Gh-jQrcXEeW4lb6BfAsDRQ" org.eventb.core.assignment="proc_stack(stack_top) ≔ {prog↦proc_stack(stack_top)(prog), cmd↦proc_stack(stack_top)(cmd)+1}" org.eventb.core.label="2_act0"/>
</org.eventb.core.event>
<org.eventb.core.event name="_eA6XMrMXEeWeFKteydocvW" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="rotate_right">
<org.eventb.core.refinesEvent name="_-JJEYLb7EeWxZ4N0nR4Cbw" org.eventb.core.target="rotate_right"/>
<org.eventb.core.guard name="_Gh-jQ7cXEeW4lb6BfAsDRQ" org.eventb.core.label="2_grd0" org.eventb.core.predicate="play_mode =TRUE"/>
<org.eventb.core.guard name="_Gh-jRLcXEeW4lb6BfAsDRQ" org.eventb.core.label="2_grd1" org.eventb.core.predicate="{cmd,prog} = dom(proc_stack(stack_top))"/>
<org.eventb.core.guard name="_Gh-jRbcXEeW4lb6BfAsDRQ" org.eventb.core.label="2_grd2" org.eventb.core.predicate="proc_stack(stack_top)(prog)∈dom(cmd_amt)"/>
<org.eventb.core.guard name="_Gh-jRrcXEeW4lb6BfAsDRQ" org.eventb.core.comment="check whether stack points to a existent command" org.eventb.core.label="2_grd3" org.eventb.core.predicate="proc_stack(stack_top)(cmd) ≤ cmd_amt(proc_stack(stack_top)(prog))"/>
<org.eventb.core.guard name="_Gh-jR7cXEeW4lb6BfAsDRQ" org.eventb.core.label="2_grd4" org.eventb.core.predicate="proc_stack(stack_top)(cmd)∈dom(proc_list(proc_stack(stack_top)(prog)))"/>
<org.eventb.core.guard name="_Gh-jSLcXEeW4lb6BfAsDRQ" org.eventb.core.comment="check whether the pointed to command is right_c" org.eventb.core.label="2_grd5" org.eventb.core.predicate="proc_list(proc_stack(stack_top)(prog))(proc_stack(stack_top)(cmd))= right_c"/>
<org.eventb.core.guard name="_Gh-jSbcXEeW4lb6BfAsDRQ" org.eventb.core.label="2_grd6" org.eventb.core.predicate="stack_top∈dom(proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1}})"/>
<org.eventb.core.guard name="_Gh-jSrcXEeW4lb6BfAsDRQ" org.eventb.core.label="2_grd7" org.eventb.core.predicate="proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1}}∈ℕ1 ⇸ (stack_lables ⇸ ℕ1)"/>
<org.eventb.core.action name="_Gh-jS7cXEeW4lb6BfAsDRQ" org.eventb.core.assignment="proc_stack(stack_top) ≔ {prog↦proc_stack(stack_top)(prog), cmd↦proc_stack(stack_top)(cmd)+1}" org.eventb.core.label="2_act0"/>
</org.eventb.core.event>
<org.eventb.core.variable name="_-JJEYbb7EeWxZ4N0nR4Cbw" org.eventb.core.comment="list that stores what commands and in what order are stored in which process" org.eventb.core.identifier="proc_list"/>
<org.eventb.core.variable name="_-JJEYrb7EeWxZ4N0nR4Cbw" org.eventb.core.comment="stores how many commands are already stored in a given process" org.eventb.core.identifier="cmd_amt"/>
<org.eventb.core.variable name="_-JJEY7b7EeWxZ4N0nR4Cbw" org.eventb.core.comment="indicator whether the play mode is activated or not" org.eventb.core.identifier="play_mode"/>
<org.eventb.core.variable name="_-JJEZLb7EeWxZ4N0nR4Cbw" org.eventb.core.comment="indictator whether the programming mode is activated or nor" org.eventb.core.identifier="prog_mode"/>
<org.eventb.core.invariant name="_-JJEZbb7EeWxZ4N0nR4Cbw" org.eventb.core.label="2_inv0" org.eventb.core.predicate="proc_list ∈ 1‥proc_number→(ℕ1⇸commands)"/>
<org.eventb.core.invariant name="_-JJEZrb7EeWxZ4N0nR4Cbw" org.eventb.core.label="2_inv1" org.eventb.core.predicate="cmd_amt ∈1‥proc_number → ℕ"/>
<org.eventb.core.invariant name="_-JJEZ7b7EeWxZ4N0nR4Cbw" org.eventb.core.label="2_inv2" org.eventb.core.predicate="∀d·d∈1‥proc_number ⇒ cmd_amt(d)≤proc_length(d)"/>
<org.eventb.core.invariant name="_-JJEaLb7EeWxZ4N0nR4Cbw" org.eventb.core.label="2_inv3" org.eventb.core.predicate="play_mode ∈ {TRUE,FALSE}"/>
<org.eventb.core.invariant name="_-JJEabb7EeWxZ4N0nR4Cbw" org.eventb.core.label="2_inv4" org.eventb.core.predicate="prog_mode ∈ {TRUE,FALSE}"/>
<org.eventb.core.invariant name="_-JJEarb7EeWxZ4N0nR4Cbw" org.eventb.core.label="2_inv5" org.eventb.core.predicate="play_mode ≠ prog_mode"/>
<org.eventb.core.event name="_-JJEa7b7EeWxZ4N0nR4Cbw" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="light">
<org.eventb.core.refinesEvent name="_-JJEbLb7EeWxZ4N0nR4Cbw" org.eventb.core.target="light"/>
<org.eventb.core.guard name="_Gh-jTLcXEeW4lb6BfAsDRQ" org.eventb.core.label="2_grd0" org.eventb.core.predicate="play_mode =TRUE"/>
<org.eventb.core.guard name="_Gh-jTbcXEeW4lb6BfAsDRQ" org.eventb.core.label="2_grd1" org.eventb.core.predicate="{cmd,prog} = dom(proc_stack(stack_top))"/>
<org.eventb.core.guard name="_Gh-jTrcXEeW4lb6BfAsDRQ" org.eventb.core.label="2_grd2" org.eventb.core.predicate="proc_stack(stack_top)(prog)∈dom(cmd_amt)"/>
<org.eventb.core.guard name="_Gh-jT7cXEeW4lb6BfAsDRQ" org.eventb.core.comment="check whether stack points to a existent command" org.eventb.core.label="2_grd3" org.eventb.core.predicate="proc_stack(stack_top)(cmd) ≤ cmd_amt(proc_stack(stack_top)(prog))"/>
<org.eventb.core.guard name="_Gh-jULcXEeW4lb6BfAsDRQ" org.eventb.core.label="2_grd4" org.eventb.core.predicate="proc_stack(stack_top)(cmd)∈dom(proc_list(proc_stack(stack_top)(prog)))"/>
<org.eventb.core.guard name="_Gh-jUbcXEeW4lb6BfAsDRQ" org.eventb.core.comment="check whether the pointed to command is light_c" org.eventb.core.label="2_grd5" org.eventb.core.predicate="proc_list(proc_stack(stack_top)(prog))(proc_stack(stack_top)(cmd))= light_c"/>
<org.eventb.core.guard name="_Gh-jUrcXEeW4lb6BfAsDRQ" org.eventb.core.label="2_grd6" org.eventb.core.predicate="stack_top∈dom(proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1}})"/>
<org.eventb.core.guard name="_Gh-jU7cXEeW4lb6BfAsDRQ" org.eventb.core.label="2_grd7" org.eventb.core.predicate="proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1}}∈ℕ1 ⇸ (stack_lables ⇸ ℕ1)"/>
<org.eventb.core.action name="_Gh-jVLcXEeW4lb6BfAsDRQ" org.eventb.core.assignment="proc_stack(stack_top) ≔ {prog↦proc_stack(stack_top)(prog), cmd↦proc_stack(stack_top)(cmd)+1}" org.eventb.core.label="2_act0"/>
</org.eventb.core.event>
<org.eventb.core.event name="_-JJEbbb7EeWxZ4N0nR4Cbw" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="jump">
<org.eventb.core.refinesEvent name="_-JJEbrb7EeWxZ4N0nR4Cbw" org.eventb.core.target="jump"/>
<org.eventb.core.guard name="_Gh-jVbcXEeW4lb6BfAsDRQ" org.eventb.core.label="2_grd0" org.eventb.core.predicate="play_mode =TRUE"/>
<org.eventb.core.guard name="_Gh-jVrcXEeW4lb6BfAsDRQ" org.eventb.core.label="2_grd1" org.eventb.core.predicate="{cmd,prog} = dom(proc_stack(stack_top))"/>
<org.eventb.core.guard name="_Gh-jV7cXEeW4lb6BfAsDRQ" org.eventb.core.label="2_grd2" org.eventb.core.predicate="proc_stack(stack_top)(prog)∈dom(cmd_amt)"/>
<org.eventb.core.guard name="_Gh-jWLcXEeW4lb6BfAsDRQ" org.eventb.core.comment="check whether stack points to a existent command" org.eventb.core.label="2_grd3" org.eventb.core.predicate="proc_stack(stack_top)(cmd) ≤ cmd_amt(proc_stack(stack_top)(prog))"/>
<org.eventb.core.guard name="_Gh-jWbcXEeW4lb6BfAsDRQ" org.eventb.core.label="2_grd4" org.eventb.core.predicate="proc_stack(stack_top)(cmd)∈dom(proc_list(proc_stack(stack_top)(prog)))"/>
<org.eventb.core.guard name="_Gh-jWrcXEeW4lb6BfAsDRQ" org.eventb.core.comment="check whether the pointed to command is jump_c" org.eventb.core.label="2_grd5" org.eventb.core.predicate="proc_list(proc_stack(stack_top)(prog))(proc_stack(stack_top)(cmd))= jump_c"/>
<org.eventb.core.guard name="_Gh-jW7cXEeW4lb6BfAsDRQ" org.eventb.core.label="2_grd6" org.eventb.core.predicate="stack_top∈dom(proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1}})"/>
<org.eventb.core.guard name="_Gh-jXLcXEeW4lb6BfAsDRQ" org.eventb.core.label="2_grd7" org.eventb.core.predicate="proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1}}∈ℕ1 ⇸ (stack_lables ⇸ ℕ1)"/>
<org.eventb.core.action name="_Gh-jXbcXEeW4lb6BfAsDRQ" org.eventb.core.assignment="proc_stack(stack_top) ≔ {prog↦proc_stack(stack_top)(prog), cmd↦proc_stack(stack_top)(cmd)+1}" org.eventb.core.label="2_act0"/>
</org.eventb.core.event>
<org.eventb.core.variable name="_3Ch34bcEEeWqgZYF5piVcw" org.eventb.core.comment="program-stack, used to process commands in the specified order" org.eventb.core.identifier="proc_stack"/>
<org.eventb.core.invariant name="_3Ch34rcEEeWqgZYF5piVcw" org.eventb.core.label="2_inv6" org.eventb.core.predicate="proc_stack ∈ ℕ1 ⇸ (stack_lables⇸ℕ1)"/>
<org.eventb.core.invariant name="_czpPgLcMEeW4Y8du5uLb4w" org.eventb.core.label="2_inv7" org.eventb.core.predicate="stack_top ∈ dom(proc_stack)"/>
<org.eventb.core.variable name="_uXlx8LcNEeWFJeLpwlsfuA" org.eventb.core.comment="indicator that shows the current top of the program-stack" org.eventb.core.identifier="stack_top"/>
<org.eventb.core.event name="_2kVTcLcZEeWtRptBQ4pViQ" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="start_proc1">
<org.eventb.core.guard name="_2kV6gLcZEeWtRptBQ4pViQ" org.eventb.core.label="2_grd0" org.eventb.core.predicate="play_mode =TRUE"/>
<org.eventb.core.guard name="_2kV6gbcZEeWtRptBQ4pViQ" org.eventb.core.label="2_grd1" org.eventb.core.predicate="{cmd,prog} = dom(proc_stack(stack_top))"/>
<org.eventb.core.guard name="_2kV6grcZEeWtRptBQ4pViQ" org.eventb.core.label="2_grd2" org.eventb.core.predicate="proc_stack(stack_top)(prog)∈dom(cmd_amt)"/>
<org.eventb.core.guard name="_2kV6g7cZEeWtRptBQ4pViQ" org.eventb.core.comment="check whether stack points to a existent command" org.eventb.core.label="2_grd3" org.eventb.core.predicate="proc_stack(stack_top)(cmd) ≤ cmd_amt(proc_stack(stack_top)(prog))"/>
<org.eventb.core.guard name="_2kWhkLcZEeWtRptBQ4pViQ" org.eventb.core.label="2_grd4" org.eventb.core.predicate="proc_stack(stack_top)(cmd)∈dom(proc_list(proc_stack(stack_top)(prog)))"/>
<org.eventb.core.guard name="_2kWhkbcZEeWtRptBQ4pViQ" org.eventb.core.comment="check whether the pointed to command is sub-process1" org.eventb.core.label="2_grd5" org.eventb.core.predicate="proc_list(proc_stack(stack_top)(prog))(proc_stack(stack_top)(cmd))= proc1_c"/>
<org.eventb.core.action name="_2kWhkrcZEeWtRptBQ4pViQ" org.eventb.core.assignment="proc_stack ≔  proc_stack  { stack_top ↦ { prog ↦ proc_stack(stack_top)(prog), cmd ↦ proc_stack(stack_top)(cmd) +1}, stack_top + 1 ↦ { prog ↦ 2, cmd ↦ 1 } }" org.eventb.core.label="2_act0"/>
<org.eventb.core.action name="_2kWhk7cZEeWtRptBQ4pViQ" org.eventb.core.assignment="stack_top ≔ stack_top+1" org.eventb.core.label="2_act1"/>
<org.eventb.core.guard name="_SIUM4LcaEeW-tbcSMvtC4g" org.eventb.core.label="2_grd6" org.eventb.core.predicate="proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1},stack_top+1 ↦ {prog ↦ 2,cmd ↦ 1}}∈ℕ1 ⇸ (stack_lables ⇸ ℕ1)"/>
<org.eventb.core.guard name="_WgIhsLcaEeW-tbcSMvtC4g" org.eventb.core.label="2_grd7" org.eventb.core.predicate="stack_top+1∈dom(proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1},stack_top+1 ↦ {prog ↦ 2,cmd ↦ 1}})"/>
</org.eventb.core.event>
<org.eventb.core.event name="_2kXIoLcZEeWtRptBQ4pViQ" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="start_proc2">
<org.eventb.core.guard name="_eqde0LcaEeW-tbcSMvtC4g" org.eventb.core.label="2_grd0" org.eventb.core.predicate="play_mode =TRUE"/>
<org.eventb.core.guard name="_eqde0bcaEeW-tbcSMvtC4g" org.eventb.core.label="2_grd1" org.eventb.core.predicate="{cmd,prog} = dom(proc_stack(stack_top))"/>
<org.eventb.core.guard name="_eqde0rcaEeW-tbcSMvtC4g" org.eventb.core.label="2_grd2" org.eventb.core.predicate="proc_stack(stack_top)(prog)∈dom(cmd_amt)"/>
<org.eventb.core.guard name="_eqeF4LcaEeW-tbcSMvtC4g" org.eventb.core.comment="checks whether stack points to an existent command / current command-num does not exceed cmd_amt variable" org.eventb.core.label="2_grd3" org.eventb.core.predicate="proc_stack(stack_top)(cmd) ≤ cmd_amt(proc_stack(stack_top)(prog))"/>
<org.eventb.core.guard name="_eqeF4bcaEeW-tbcSMvtC4g" org.eventb.core.label="2_grd4" org.eventb.core.predicate="proc_stack(stack_top)(cmd)∈dom(proc_list(proc_stack(stack_top)(prog)))"/>
<org.eventb.core.guard name="_eqeF4rcaEeW-tbcSMvtC4g" org.eventb.core.comment="check whether the pointed to command is sub-process2" org.eventb.core.label="2_grd5" org.eventb.core.predicate="proc_list(proc_stack(stack_top)(prog))(proc_stack(stack_top)(cmd))= proc2_c"/>
<org.eventb.core.guard name="_eqeF47caEeW-tbcSMvtC4g" org.eventb.core.label="2_grd6" org.eventb.core.predicate="proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1},stack_top+1 ↦ {prog ↦ 3,cmd ↦ 1}}∈ℕ1 ⇸ (stack_lables ⇸ ℕ1)"/>
<org.eventb.core.guard name="_eqes8LcaEeW-tbcSMvtC4g" org.eventb.core.label="2_grd7" org.eventb.core.predicate="stack_top+1∈dom(proc_stack{stack_top ↦ {prog ↦ proc_stack(stack_top)(prog),cmd ↦ proc_stack(stack_top)(cmd)+1},stack_top+1 ↦ {prog ↦ 3,cmd ↦ 1}})"/>
<org.eventb.core.action name="_eqes8bcaEeW-tbcSMvtC4g" org.eventb.core.assignment="proc_stack ≔  proc_stack  { stack_top ↦ { prog ↦ proc_stack(stack_top)(prog), cmd ↦ proc_stack(stack_top)(cmd) +1}, stack_top + 1 ↦ { prog ↦ 3, cmd ↦ 1 } }" org.eventb.core.label="2_act0"/>
<org.eventb.core.action name="_eqes8rcaEeW-tbcSMvtC4g" org.eventb.core.assignment="stack_top ≔ stack_top+1" org.eventb.core.label="2_act1"/>
</org.eventb.core.event>
<org.eventb.core.event name="_2kXIobcZEeWtRptBQ4pViQ" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="end_proc1">
<org.eventb.core.guard name="_3DDIYLccEeW-tbcSMvtC4g" org.eventb.core.label="2_grd0" org.eventb.core.predicate="play_mode=TRUE"/>
<org.eventb.core.guard name="_3DDIYbccEeW-tbcSMvtC4g" org.eventb.core.label="2_grd1" org.eventb.core.predicate="{cmd,prog} = dom(proc_stack(stack_top))"/>
<org.eventb.core.guard name="_3DDIYrccEeW-tbcSMvtC4g" org.eventb.core.label="2_grd2" org.eventb.core.predicate="proc_stack(stack_top)(prog) = 2"/>
<org.eventb.core.guard name="_3DDIY7ccEeW-tbcSMvtC4g" org.eventb.core.label="2_grd3" org.eventb.core.predicate="proc_stack(stack_top)(prog)∈dom(cmd_amt)"/>
<org.eventb.core.guard name="_KM-moLcdEeW-tbcSMvtC4g" org.eventb.core.comment="can only end process 1 when no more commands are  available / current command-num exceeds cmd_amt variable" org.eventb.core.label="2_grd4" org.eventb.core.predicate="proc_stack(stack_top)(cmd) &gt; cmd_amt(proc_stack(stack_top)(prog))"/>
<org.eventb.core.guard name="_iuWDoLcdEeW-tbcSMvtC4g" org.eventb.core.label="2_grd5" org.eventb.core.predicate="proc_stack ∖ {stack_top ↦ proc_stack(stack_top)} ∈ℕ1 ⇸ (stack_lables ⇸ ℕ1)"/>
<org.eventb.core.guard name="_iuWDobcdEeW-tbcSMvtC4g" org.eventb.core.label="2_grd6" org.eventb.core.predicate="(stack_top−1) &gt;0"/>
<org.eventb.core.guard name="_iuWDorcdEeW-tbcSMvtC4g" org.eventb.core.label="2_grd7" org.eventb.core.predicate="stack_top − 1∈dom(proc_stack ∖ {stack_top ↦ proc_stack(stack_top)})"/>
<org.eventb.core.action name="_CIeIMbceEeW-tbcSMvtC4g" org.eventb.core.assignment="proc_stack ≔ proc_stack ∖ {stack_top ↦ proc_stack(stack_top)}" org.eventb.core.label="2_act0"/>
<org.eventb.core.action name="_CIeIMrceEeW-tbcSMvtC4g" org.eventb.core.assignment="stack_top ≔ stack_top−1" org.eventb.core.label="2_act1"/>
</org.eventb.core.event>
<org.eventb.core.event name="_2kXIorcZEeWtRptBQ4pViQ" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="end_proc2">
<org.eventb.core.guard name="_iuWDo7cdEeW-tbcSMvtC4g" org.eventb.core.label="2_grd0" org.eventb.core.predicate="play_mode=TRUE"/>
<org.eventb.core.guard name="_iuWDpLcdEeW-tbcSMvtC4g" org.eventb.core.label="2_grd1" org.eventb.core.predicate="{cmd,prog} = dom(proc_stack(stack_top))"/>
<org.eventb.core.guard name="_CIeIMLceEeW-tbcSMvtC4g" org.eventb.core.label="2_grd2" org.eventb.core.predicate="proc_stack(stack_top)(prog) = 3"/>
<org.eventb.core.guard name="_I7NnULceEeW-tbcSMvtC4g" org.eventb.core.label="2_grd3" org.eventb.core.predicate="proc_stack(stack_top)(prog)∈dom(cmd_amt)"/>
<org.eventb.core.guard name="_BCT78LcfEeW-tbcSMvtC4g" org.eventb.core.comment="can only end process 2 when no more commands are  available / current command-num exceeds cmd_amt variable" org.eventb.core.label="2_grd4" org.eventb.core.predicate="proc_stack(stack_top)(cmd) &gt; cmd_amt(proc_stack(stack_top)(prog))"/>
<org.eventb.core.guard name="_dTCmoLcfEeW-tbcSMvtC4g" org.eventb.core.label="2_grd5" org.eventb.core.predicate="proc_stack ∖ {stack_top ↦ proc_stack(stack_top)} ∈ℕ1 ⇸ (stack_lables ⇸ ℕ1)"/>
<org.eventb.core.guard name="_dTCmobcfEeW-tbcSMvtC4g" org.eventb.core.label="2_grd6" org.eventb.core.predicate="(stack_top−1) &gt;0"/>
<org.eventb.core.guard name="_dTCmorcfEeW-tbcSMvtC4g" org.eventb.core.label="2_grd7" org.eventb.core.predicate="stack_top − 1∈dom(proc_stack ∖ {stack_top ↦ proc_stack(stack_top)})"/>
<org.eventb.core.action name="_dTDNsLcfEeW-tbcSMvtC4g" org.eventb.core.assignment="proc_stack ≔ proc_stack ∖ {stack_top ↦ proc_stack(stack_top)}" org.eventb.core.label="2_act0"/>
<org.eventb.core.action name="_dTDNsbcfEeW-tbcSMvtC4g" org.eventb.core.assignment="stack_top ≔ stack_top−1" org.eventb.core.label="2_act1"/>
</org.eventb.core.event>
</org.eventb.core.machineFile>
